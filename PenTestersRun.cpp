/*
 Modified By : Nicholas Howland
 Last modified : 2/13/2023
 Program purpose : Create a working game from scratch using programming classes
*/

// initalize the libraries and variubles needed
#include <iostream>
#include <cstdlib>
#include <ctime>
#include <cmath>
using namespace std;
/*
Rules:
        one guard patrols the office checking each room
        you can only hear them if they are in a room near you or in the hall next to your room
        you can only be caught by a guard if they are in the same room or hall as you
		you must collect information security violations or hack computers to gain points
		if you are caught or run out of nerve you lose
		nerve is lost by preforming actions such as collecting or hacking and as time goes by
		nerve is regained by hiding or checking for the guard

*/


//----------------GLOBAL VARS--------------------
//-----------------player stats---------------
struct playerStruct{
		int sensitiveMaterials;// sensitive materials gathered
		int devicesCompromised;// devices hacked
		int nerve;// exposure points
		int location;// player location
		int action;//action taken switch
		int hidden;// 0 is hidden 1 is not.
		int turns;// turn count
		int listened;// limits the user to one gain only one nerve per turn from listening no matter how many times they actually listen.
};


//-----------------Building Status---------------
struct buildingStruct{
		int office1;
		int office2;
		int office3;
		int office4;
		int office5;
		int boardRoom;
		int serverRoom;
		int itOffice;
		int guardLocation;
		int lastGuardLocation;
		int soundProofed;
		int enteredBoardRoom;
		int enteredServerRoom;
		int entereditOffice;
		int enteredLobby;
		int enteredSouthHall;
		int enteredNorthHall;
		int enteredServiceHall;
};
//-----------------Inital Stats------------------
struct playerStruct player={0,0,99,0,1,0,0};
struct buildingStruct building={0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0};
int validMove(int,int);
void printMap();
int getRoomAttributes(int);
void setRoomAttributes(int,int);
int preformAction(int,int);
void listen(int, int);
string intro();
int lobby();
int southHall(int, int);
int northHall(int, int );
int serviceHall(int, int );
int serverRoom(int, int );
int boardRoom(int, int);
int itOffice(int , int );
int office(int , int ,int );
int guardMove(int );
int caughtCheck(int ,int );
void foundInformationDialouge(int);
void score(int);
void enterToContinue();



// print the map
void printMap(){
cout <<"     _____Window________________"<<endl;
cout <<"    |                 |         |"<<endl;
cout <<"    |    Board Room       IT    |"<<endl;
cout <<"    |_______    ______| Office  |"<<endl;
cout <<"    |     |           |____  ___|"<<endl;
cout <<"    |  5              |         |"<<endl;
cout <<"    |     |                       Emergancy"<<endl;
cout <<"    |_____|      _____|____  ___|  Exit"<<endl;
cout <<"    |     |     |     |         |"<<endl;
cout <<"    |  4           3  | Server  |"<<endl;
cout <<"    |_____|     |_____|  Room   |"<<endl;
cout <<"    |     |     |     |_________|"<<endl;
cout <<"    |  2           1  |"<<endl;
cout <<"    |_____|     |_____|"<<endl;
cout <<"    |                 |"<<endl;
cout <<"    |      Lobby      |"<<endl;
cout <<"    |_______   _______|"<<endl;
enterToContinue();
/*
Number codes for rooms
		lobby is an area of its own
        office hallway near 1-4 = SouthHall
        Board room and office 5 = NorthHall
        IT and Server rooms = ServiceHall
        By number
                0 Lobby
                10 south hall
                11 office 1
                12 office 2
                13 office 3
                14 office 4
                20 north hall
                21 office 5
                22 board room
                30 service hall
                31 IT office
                32 server room

*/

}
//-----------------Dialouge functions---------------
void enterToContinue(){
	cin.clear();
	cout << endl << "Press enter to continue..."<<endl;
	cin.get();
	cin.clear();
}
void soundProofSetting(){
	char c;
	while(toupper( c ) != 'Y' && toupper( c ) != 'N'){
		cin >> c;
		if (toupper( c ) == 'Y'){
			building.soundProofed=1;
			cout << "Impossible Mode Choosen\nBuilding is sound proofed.\n";
		}
		else if (toupper( c ) == 'N'){
			building.soundProofed=0;			
			cout << "Normal Mode Chosen\nBuilding is not sound proofed\n";
		}
		else{
			cout << "You must choose...\n";
		}
	}
}

void printRules(){
	cout <<"The Rules"<<endl;
	cout <<" 1) The Objective"<<endl;
	cout <<"    - Hack as much office equipement as possible and collect as many instances"<<endl;
	cout <<"    of information security policy violations as possible."<<endl;
	cout <<"    - Actions that will use a turn are: hacking, searching, hiding, and moving"<<endl;
	cout <<"    - Actions that will not use a turn are: listening for the guard and looking "<<endl;
	cout <<"      at the map"<<endl;
	cout <<"    - Hacking and finding PII in a room can only be done once per room."<<endl;\
	cout <<"    - You can only check the map or hide while you are in a room or in the lobby"<<endl;
	enterToContinue();
	cout <<" 2) The Guard"<<endl;
	cout <<"    - The guard is hopped up on speed and will act irradicllay. They move without"<<endl;
	cout <<"    thinking about their surroundings or in relation to any actions you have"<<endl;
	cout <<"    taken in the office."<<endl; 
	cout << "   - If they catch you things can go bad or worse, but one"<<endl;
	cout <<"    thing is for sure, you will be stopped in your tracks."<<endl;
	enterToContinue();
	cout <<" 3) Listening"<<endl;
	cout <<"    Normal Mode:"<<endl;
	cout <<"    - You can hear the guard anywhere in the building"<<endl;
	cout <<"    Impossible Mode:"<<endl;
	cout <<"    - While in a room, you can only hear the guard in the adjacent hallway"<<endl;
	cout <<"    - While in a hallway you can hear the guard if they are in a room"<<endl;
	cout <<"      adjacent or if you are in a hallway you can hear the guard in the"<<endl; 
	cout <<"      adjacent hallways."<<endl; 
	enterToContinue();
	cout <<" 4) Nerve"<<endl;
	cout <<"	you get nervous just like a regular person, but unfortunately if you get"<<endl;
	cout <<"	too nervous or leave too early you will leave the site and fumble. This"<<endl;
	cout <<"	means you will leave without pay. Your stats will be displayed at the end"<<endl;
	cout <<"	of the round but they are in effect meaningless."<<endl;
	enterToContinue();
	cout <<" 5) Hiding"<<endl; 
	cout <<"    - While in a room you can hide to gain some nerve back. If a guard walks into"<<endl; 
	cout <<"      the room while you are hiding you are safe. "<<endl; 
	cout <<"    - HOWEVER if you try to leave while"<<endl; 
	cout <<"      the guard is present they will catch you."<<endl; 
	cout <<"    - Once they are gone you can continue to do the things you were doing."<<endl; 
	cout <<""<<endl;
	enterToContinue();
	cout <<"Lastly... Enable Impossible Mode?Y/N\nchoice>";
	soundProofSetting();
}


string intro(){
// print the introduction preamble and get the player name
        string name="";
        int buff=0;// buffer so the user can read the initial prompt before looking at the map
        cout <<"\n\n       					PenTesters Run\n\n"<<endl;
		cout <<"DISCLAIMER: This is a pure work of fiction and not an endorsment of breaking"<<endl;
		cout <<"and entering also its probably not a realistic simulation for a penetration "<<endl;
		cout <<"test or penetration testers busniess model. All actions and statemnts in this"<<endl;
		cout <<"game should be taken as pure fiction however detailed."<<endl;
		cout <<""<<endl;
		cout <<"	Inspiration drawn from Niel Stephenson and William Gibson."<<endl;
		enterToContinue();
		printRules();
		cout <<""<<endl;
        cout << "Enter your name or alias here: "; cin >> name;cout << endl;
        cout << "Good news "<<name<<" company xyz has chosen you to test their new locations" << endl;
        cout << "security. They want to know how well the new employees are following" << endl;
        cout << "the security policy. A good measure of this is seeing how much they" << endl;
        cout << "leave on their desks. The more sensitive material is found the bigger" << endl;
        cout << "a check they give you. They also want to know how vulnerable their IT" << endl;
        cout << "system are to physical attacks and how much damage a bad guy could do" << endl;
        cout << "on their network."<<endl;enterToContinue();
		cout << "Luckily for them you have a bag of tricks and a strong moral compass. This" << endl;
        cout << " includes a few keyloggers, a USB backdoor installer, a nifty compact" << endl;
        cout << "remote access server in the form of a rasberry pi for persistance on the " << endl;
        cout << "network from home. Earlier today you were able to clone one of the IT guys" << endl;
        cout << "keycards which will give you free reign over the entire office. They do " << endl;
        cout << "have a guard on night duty, and if they catch you the gig is up and you " << endl;
        cout << "dont get paid, so be sure to avoid them at all costs. You heard them " << endl;
        cout << "walking around today with a big keychain so hopefully they wont be to hard" << endl;
        cout << "to hear." << endl;
        cout << "\n.... a few hours later ....\n"<< endl;
		enterToContinue();
        cout << "You enered the lobby after seeing the security guard near the emergancy"<< endl;
        cout << "exit. After entering the building the sound of the guard coming back" << endl;
        cout << "echos through the halls. A rush of blood hits your ears as you think"<< endl;
		cout << "of what to do as you recall the map..."<<endl;
		printMap();
        return name;
}

void foundInformationDialouge(int inOffice){
	int roll=rand()%4;
	switch(roll){
		case 0:
			if(inOffice==0){
				cout << "#You found a password under their keyboard... not so sneaky." << endl;
			}else{
				cout << "#There is a sticky note with the CEO's personal phone number stuck to the wall." << endl;
			}
			break;
		case 1:
			cout << "#In the corner is an unlocked filing cabinet with a drawer ajar." << endl;
			break;
		case 2:
			cout << "#A customers file is laying out for anyone to see." << endl;
			break;
		case 3:
			cout << "#A finance report is not locked in a secure location." << endl;
			break;
	}
}
void score(int testingResult){
	cin.clear();
	int roll=0;
	int negScore=0;
	if(testingResult==-1){// you succeeded
		if(player.turns > 3 && (player.devicesCompromised >2 || player.sensitiveMaterials > 0)){// you have to play to win.
			cout << "After slipping out of the office you walk a few blocks away to a delorian" << endl;
			cout << "parked right where you left it last. After getting in the drivers seat you" << endl;
			cout << "let out a hardy laugh and flip open a binder where you take careful notes." << endl;
			if(player.devicesCompromised >6 || player.sensitiveMaterials > 6){// if player did well then they get a special dialouge
			cout << "Your preperation, dedication, and lasor focus lead you to this small victory." << endl;
			cout << "Afterwards you head out to your favorite spot downtown and celebrate a successful" << endl;
			cout << "night, taking pride in the fact that your work here will be used to secure" << endl;
			cout << "another client against physical attacks. You raise your glass to the people " << endl;
			cout << "who taught you what you knowand all those who helped you reach this moment."<<endl<< endl;
			}
			cout << "The next morning you get a call from the security team to recap what you were " << endl;
			cout << "able to accomplish and what violations you found."<< endl << endl;
			cout << "Digital Devices Compromised: " << player.devicesCompromised << endl;
			cout << "Information Security Policy Violations collected: " << player.sensitiveMaterials << endl;
			cout << "Time Taken: " << (player.turns*5)*1.0/60 << " Hours (" << player.turns << " turns)"<< endl;
			cout << "Estimated Earnings: "<< (player.devicesCompromised*200)+(player.sensitiveMaterials*200)+2500;
		} else{
			cout << "You decided it was a bad night to try your hand, sometimes its better to walk" << endl;
			cout << "away than wish you had. Oh well there is always another night." << endl;
		}
	} else if(testingResult==-2){// you were caught
		roll = rand()%3;// roll to see if you get tazed or shot by the sleep deprived guard or if they calmly restrained you.
		switch(roll){
			case 0: // you get tazed
				cout << "The guard looks at you bewildered and confused. Quickly and wrecklessly" << endl;
				cout << "drawing a tasor. You hear and feel the current moving through your body as your" << endl;
				cout << "wrestled to the ground. Smashing your hand into the cold hard floor as they restrain" << endl;
				cout << "you. You see the pistol attached to their belt and thank whatever higher power there " << endl;
				cout << "is they didnt shoot you with that instead." << endl;

				negScore=-6000;// hospital bill
			case 1: // the cops dont believe the guard
				cout << "The guard immediately slaps a set of cuffs on you and takes the letter." << endl; 
				cout << "After they are done calling the police the authorization letter is opned and"<<endl;
				cout << "read. You are stone stiff hopeing that the contract you got was legit and"<<endl;
				cout << "the head of security remembers authorizing you. With a smirk on their face they"<<endl;
				cout << "hang up the phone and hand the authorization letter back to you. The cops arrive"<<endl;
				cout << "and the guard explains what happened...";// roll to see if the cops accept the guards word
				break;
		}
		roll = rand()%2;// roll to see if you get tazed or shot by the sleep deprived guard or if they calmly restrained you.
		switch(roll){
			case 0: // you go home defeated but free.
				cout << "the cops cautiously accept what the guard was saying as the truth. you explain" << endl;
				cout << "your job to them and a bit about your history doing penetration testing. After" << endl;
				cout << "a few minutes of chatting they snap a couple pictures of you for good measure" << endl;
				cout << "and leave. You leave and get ready to write the report knowing that everything" << endl;
				cout << "you accomplished leading up to and durring this test will go unpaid. After " << endl;
				cout << "arriving home you drop into your lazy boy feeling defeated and look at your" << endl;
				cout << "empty successes." << endl;
				break;
			case 1:// the cops say fuck it and take you into custody.
				cout << "the officers look at each other for a moment, nod, and take you away from the guard." << endl;
				cout << "They hold your head down and put you in the back of the squad car where you are taken" << endl;
				cout << "downtown for processing. You try your best to explain what you were doing there and" << endl;
				cout << "why it looks like you were tresspassing with all this hacking equipment but they are" << endl;
				cout << "not having it. They ask a number of leading questions to create a guilty case and take" << endl;
				cout << "a good long while finding a phone for you to use. Your friend posts bail for you, then" << endl;
				cout << "you head home defeated, tired and discheveled to think about all of the success you" << endl;
				cout << "could have had..." << endl;
				negScore=negScore-3000;
				break;
			}
			enterToContinue();
			cout << "Digital Devices Compromised: " << player.devicesCompromised << endl;
			cout << "Information Security Policy Violations collected: " << player.sensitiveMaterials << endl;
			cout << "Time Taken: " << (player.turns*5)*1.0/60 << " Hours (" << player.turns << " turns)"<< endl;
			cout << "You could have made: $"<< (player.devicesCompromised*200)+(player.sensitiveMaterials*200)+2500<<endl;
			cout << "Cost of failure: $"<<negScore<<endl;
	}else if(testingResult==-3){
			cout << "Your hands are sweating so much, and you have a feeling the guard is seriously on to you."<< endl;
			cout << "You have to get out of this place as soon as possible. You manuver your way through the building"<< endl;
			cout << "evading the guard. On your way to the car you fumble to remember exactly what you had done and the"<< endl;
			cout << "pictures you took are too blurry to prove anything to the client. Tonight was a loss but at least"<< endl;
			cout << "you were not caught... that you know of... This is what you do know though."<< endl;
			cout << "Digital Devices Compromised: " << player.devicesCompromised << endl;
			cout << "Information Security Policy Violations collected: " << player.sensitiveMaterials << endl;
			cout << "Time Taken: " << (player.turns*5)*1.0/60 << " Hours (" << player.turns << " turns)"<< endl;
			cout << "You could have earned: $"<< (player.devicesCompromised*200)+(player.sensitiveMaterials*200)+2500<<endl;
			cout << "Cost of failure: $"<<negScore<<endl;
	}
}

string returnLocationString(int room){
	string roomName="";
	switch(room){
		case 0:
				roomName="Lobby";
				break;
		case 10:
				roomName="South Hall";
				break;
		case 11:
				roomName="First Office";
				break;
		case 12:
				roomName="Second Office";
				break;
		case 13:
				roomName="Third Office";
				break;
		case 14:
				roomName="Fourth Office";
				break;
		case 20:
				roomName="North Hall";
				break;
		case 21:
				roomName="Fifth Office";
				break;
		case 22:
				roomName="Board Room";
				break;
		case 30:
				roomName="Service Hall";
				break;
		case 31:
				roomName="IT Office";
				break;
		case 32:
				roomName="Server Room";
				break;
	}
	return roomName;
}


//-----------------Action functions---------------
int validMove(int min, int max){
        int choice=0;
        cout << "choice> ";cin >> choice;
        while(choice <! max+1 && choice >! min-1){
				cin.clear();
				cin.ignore();
                cout << "Please enter a valid choice between "<<min<<" and "<<max<<": ";cin >>choice;
        }
		cout << endl;
        return choice;
}
int getRoomAttributes(int room){
	int roomMemory=0;
	switch(room){
		case 11:
                roomMemory=building.office1;
				break;
		case 12:
                roomMemory=building.office2;		
				break;
		case 13:
                roomMemory=building.office3;
				break;
		case 14:
                roomMemory=building.office4;
				break;
		case 21:
                roomMemory=building.office5;
				break;
		case 22:
                roomMemory=building.boardRoom;
				break;
		case 31:
                roomMemory=building.serverRoom;
				break;
		case 32:
                roomMemory=building.itOffice;
				break;
		default:
				roomMemory=2;
				break;
	}
	return roomMemory;
}

void setRoomAttributes(int room, int value){
	switch(room){
		case 11:
                building.office1=value;
				break;
		case 12:
                building.office2=value;
				break;
		case 13:
               building.office3=value;
				break;
		case 14:
               building.office4=value;
				break;
		case 21:
               building.office5=value;
				break;
		case 22:
               building.boardRoom=value;
				break;
		case 31:
               building.serverRoom=value;
				break;
		case 32:
               building.itOffice=value;
				break;
		default:
				break;
	}
}


int preformAction(int room, int action){
	/*
	Actions:
	1 - sensitive information finding
	10 - hack the computers in the room
	*/
	int result=0;
	/*
	Actions:
	0 - action failed
	1 - action succeeded
	*/
	
	int roomMemory=getRoomAttributes(room);
	switch(action){
		case 1:// sensitive document finding action
			if(roomMemory % 10 == 1){// if the room memory %10 results in 1 that means docs were already found here
				cout << "# You have already found all the sensitive information in this room"<<endl;
			} else{// else add one to the room value
				setRoomAttributes(room,roomMemory+1);
				player.nerve=player.nerve-10;
				if(room<15 || room >10 || room == 21){// print appropreate dialouge for offices
					foundInformationDialouge(0);
				}else{
					foundInformationDialouge(room);
				}
				cout << "# You take a few moments to take snap pictures for the report"<<endl;// CHANGE could add a funciton to dynamic output, found a password under the keyboard, someone left their desk drawr open, etc...
				player.sensitiveMaterials=player.sensitiveMaterials+1;// add another picture to the report.
				result=1;
			}
			break;
		case 10:// hack a thing action
			if(roomMemory > 9){// if memory in room is greater than 10 room was hacked
				cout << "# No need you have already hacked what is in this room."<<endl;
			} else{// else add 10 to the room Memory
				setRoomAttributes(room,roomMemory+10);
				player.nerve=player.nerve-10;
				cout << "# It takes a few minutes but the hack is successful."<<endl;
				player.devicesCompromised=player.devicesCompromised+1;// add another device to the list of devices hacked
				result=1;
			}
			break;
		default:
				cout << "There is nothing hackable here."<<endl;
	}
	
	return result;
}



void listen(int yourLocation, int guardLocation){
        int yourArea=yourLocation/10;
        int guardArea=guardLocation/10;
		player.listened=1;

/*DEBUGGING
        cout << "You are in " << yourArea << endl;
        cout << "The guard is in " << guardArea << endl;
*/
	if(building.soundProofed==1){
        if(guardArea == yourArea){
                cout << "You hear ";
                switch(guardLocation){
                        case 0:
								cout << "the guard shuffling about in the Lobby"<<endl;
                                break;
                        case 10:
                                cout << "the guard shuffling about in the South Hall" << endl;
                                break;
                        case 11:
                                cout << "the guard shuffling about in the First Office" << endl;
                                break;
                        case 12:
                                cout << "the guard shuffling about in the Second Office" << endl;
                                break;
                        case 13:
                                cout << "the guard shuffling about in the Third Office" << endl;
                                break;
                        case 14:
                                cout << "the guard shuffling about in the Fourth Office" << endl;
                                break;
                        case 20:
                                cout << "the guard shuffling about in the North Hall" << endl;
                                break;
                        case 21:
                                cout << "the guard shuffling about in the Fifth Office" << endl;
                                break;
                        case 22:
                                cout << "the guard shuffling about in the Board Room" << endl;
                                break;
                        case 30:
                                cout << "the guard shuffling about in the Service Hall" << endl;
                                break;
                        case 31:
                                cout << "the guard shuffling about in the IT Office" << endl;
                                break;
                        case 32:
                                cout << "the guard shuffling about in the Server Room" << endl;
                                break;
                }
//        }else if(yourLocation%10==0 && guardLocation%10==0){// You can always hear if a guard is in the hallway if you preform the listen action in a hallway.
        }else if(yourLocation-10==guardLocation || yourLocation+10==guardLocation ){// You can always hear if a guard is in the hallway if you preform the listen action in an adjacent halway
                cout << "You hear ";
                switch(guardLocation){
                        case 0:
								cout << "the guard shuffling about in the Lobby."<<endl;
                                break;
                        case 10:
                                cout << "the guard shuffling about in the South Hall." << endl;
                                break;
                        case 20:
                                cout << "the guard shuffling about in the North Hall." << endl;
                                break;
                        case 30:
                                cout << "the guard shuffling about in the Service Hall." << endl;
                                break;
						default:
								cout << "nothing."<< endl;
        
				}
		}else{
                cout << "You hear nothing."<<endl;
        }
	}else{
		                cout << "# You hear ";
                switch(guardLocation){
                        case 0:
								cout << "the guard shuffling about in the Lobby"<<endl;
                                break;
                        case 10:
                                cout << "the guard shuffling about in the South Hall" << endl;
                                break;
                        case 11:
                                cout << "the guard shuffling about in the First Office" << endl;
                                break;
                        case 12:
                                cout << "the guard shuffling about in the Second Office" << endl;
                                break;
                        case 13:
                                cout << "the guard shuffling about in the Third Office" << endl;
                                break;
                        case 14:
                                cout << "the guard shuffling about in the Fourth Office" << endl;
                                break;
                        case 20:
                                cout << "the guard shuffling about in the North Hall" << endl;
                                break;
                        case 21:
                                cout << "the guard shuffling about in the Fifth Office" << endl;
                                break;
                        case 22:
                                cout << "the guard shuffling about in the Board Room" << endl;
                                break;
                        case 30:
                                cout << "the guard shuffling about in the Service Hall" << endl;
                                break;
                        case 31:
                                cout << "the guard shuffling about in the IT Office" << endl;
                                break;
                        case 32:
                                cout << "the guard shuffling about in the Server Room" << endl;
                                break;
				}
	}
}




int lobby(){
	int action=0;
//         cout << "Nerve : "<< nerve << "/100"<<endl;
		if(building.enteredLobby==0){
        cout << "The smell some air freshiner gently wafts through the air."<< endl;
		}else{cout << "# Lobby\n";}
        cout << "1) Proceed into the South Hall where most of the offices are."<< endl;
        cout << "2) Leave"<< endl;
        cout << "3) Check the map"<< endl;
		cout << "4) Hide for a few minutes"<< endl;
		cout << "5) listen for the guard"<< endl;

			NOACTIONLOBBY:
			action = validMove(1,5);
			switch(action){
				case 1:
					action= 10;// move to the south hall
					break;
				case 2:
					action= -1;// exit condition;				
					break;
				case 3:
					printMap(); // print the map
					action=player.location;
					goto NOACTIONLOBBY;// go to the begining of the switch again.
					break;
				case 4:
					cout << "# You tuck yourself between some planters in the corner of the room for a few moments"<< endl;
					action= 0;
					break;
				case 5:
					listen(player.location,building.guardLocation);
					action=player.location;
					goto NOACTIONLOBBY;// go to the begining of the switch again.					break;
					}
			building.enteredLobby=1;
			return action;
}
// Halway Functions
int southHall(int yourLocation, int guardLocation){
	int action=0;
//         cout << "Nerve : "<< nerve << "/100"<<endl;
		if(building.enteredSouthHall==0){
        cout << "You are in the south hall. Behind you is the lobby, and there are two offices on either side of you. Ahead is the north" << endl;
        cout << "hall where there is another office and the board room."<<endl;
        cout << "What would you like to do?" << endl;
		} else {cout << "You are in the South Hall \n";}
        cout << "1) Head towards the north hall(Board Room and the Office 5 access)"<< endl;
        cout << "2) Go to the lobby"<<endl;
        cout << "3) Go into one of the four offices"<< endl;
        cout << "4) Listen for the guard"<< endl;
			NOACTIONSOUTH:
			action=validMove(1,4);
			switch(action){
				case 1:
					action= 20;// move to the north hall
					break;
				case 2:
					action= 0;// move to the lobby;
					break;
				case 3:
					cout << "Which office 1 2 3 or 4?"<<endl;
					action = validMove(1,4);
					action= 10+action;
					break;
				case 4:
					listen(yourLocation,guardLocation);
					action=yourLocation;
					goto NOACTIONSOUTH;// go to the begining of the switch again.
					break;
			}
			building.enteredSouthHall=1;

		return action;
}

int northHall(int yourLocation, int guardLocation){
	int action=0;
//         cout << "Nerve : "<< nerve << "/100"<<endl;

			if(building.enteredNorthHall==0){
        cout << "You are in the north hall the boardroom is up ahead, there is another office to the left and to your left is a hallway" << endl;
        cout << "that leads to the IT and Server rooms as well as the emergancy exit.";
        cout << "What would you like to do?" << endl;
			} else {cout << "You are in the "<<returnLocationString(player.location) <<endl;}
			building.enteredNorthHall=1;
        cout << "1) Head to the service hallway(IT office and server room access)"<< endl;
        cout << "2) Head to the south hall(access to offices 1 to 4)"<< endl;
        cout << "3) Check out the office to your left"<<endl;
        cout << "4) Have a look at the board room"<< endl;
        cout << "5) Listen for the guard"<< endl;
			NOACTIONNORTH:
			action=validMove(1,5);
			switch(action){
				case 1:
					action= 30;// move to the north hall
					break;
				case 2:
					action= 10;// move to the sout hall;
					break;
				case 3:
					action= 21;
					break;
				case 4:
					action= 22;
					break;
				case 5:
					listen(yourLocation,guardLocation);
					action=yourLocation;
					goto NOACTIONNORTH;// go to the begining of the switch again.
					break;
			}
		return action;
}

int serviceHall(int yourLocation, int guardLocation){
	int action=0;
//         cout << "Nerve : "<< nerve << "/100"<<endl;
			if(building.enteredServiceHall==0){
        cout << "You have made it to the service hall without detection, pat yourself on the back. To your left is the IT office"<<endl;
        cout << "to your right is the server room, and straight ahead is the emergancy exit."<< endl;
			} else {cout << "You are in the "<<returnLocationString(player.location) <<endl;}
			building.enteredServiceHall=1;
        cout << "What would you like to do?"<<endl;
        cout << "1) Head back into the north hall"<<endl;
        cout << "2) Go into the IT office"<<endl;
        cout << "3) Slide into the server room"<<endl;
		cout << "4) Use the emergancy exit."<<endl;   
		cout << "5) Listen for the guard"<< endl;
			NOACTIONSERVICE:
			action=validMove(1,5);
			switch(action){
				case 1:
					action= 20;// move to the north hall
					break;
				case 2:
					action= 31;// move to the sout hall;
					break;
				case 3:
					action= 32;
					break;
				case 4:
					action= -1;
					break;
				case 5:
					listen(yourLocation,guardLocation);
					action=yourLocation;
					goto NOACTIONSERVICE;// go to the begining of the switch again.
					break;
			}
			return action;
}

//-----------------Area functions------------------
int serverRoom(int yourLocation, int guardLocation){
		int action=0;
		int result=0;
//         cout << "Nerve : "<< nerve << "/100"<<endl;
        cout << "What would you like to do in the server room?"<<endl;
        cout << "1) Look for sensitive information in plain sight"<<endl;
        cout << "2) Install the Raspberry Pi"<<endl;
        cout << "3) Hide for a few minutes"<<endl;
        cout << "4) Check the map"<<endl;
        cout << "5) Listen for the guard"<<endl;		
        cout << "6) Head back into the hall"<<endl;
			NOACTIONSERVER:
			action = validMove(1,5);
			switch(action){
				case 1:
					preformAction(yourLocation, 1);
					action= yourLocation; // use action
					break;
				case 2:
					result=preformAction(yourLocation, 10);
					if(result==1){
						cout << "# You jimmy the lock on the server cabinit with a hairpin and start looking for an"<< endl;
						cout << "# open network port. Now for the piece de la resistance the double ethernet ported,"<< endl;
						cout << "# cellular network enabled, packet sniffing and relaying, back dooring, tiny box of "<< endl;
						cout << "# custom digital deception and on demand destruction. You see an inactive port on a "<< endl;
						cout << "# switch. unplug the in place cable and plug in a raspberry pi in its place. Then you"<< endl;
						cout << "# plug the old cable into the open port on the custom hacking machine. This Pen Test"<< endl;
						cout << "# is going very well..."<< endl;
					}

					action= yourLocation; // use action
					break;
				case 3:
					cout << "# You slip between a couple servers and hide for a few moments"<< endl;
					player.hidden=0;
					player.nerve=player.nerve+5;
					action= yourLocation; // just chill
					break;
				case 4:
					printMap();
					action=yourLocation;
					goto NOACTIONSERVER;// go to the begining of the switch again.
					break;
				case 5:
					listen(yourLocation,guardLocation);
					action=yourLocation;
					goto NOACTIONSERVER;// go to the begining of the switch again.
					break;
				case 6:
					action= 30;
					break;
				}
				return action;
}

int boardRoom(int yourLocation, int guardLocation){
		int result=0;
		int action=0;
//         cout << "Nerve : "<< nerve << "/100"<<endl;
			if(building.enteredBoardRoom==0){
        cout << "You enter the board room, looks pretty empty other than a giant oval table and a window."<<endl;
 			} else {cout << "You are in the "<<returnLocationString(player.location) <<endl;}
			building.enteredBoardRoom=1;
		cout << "What would you like to do?"<<endl;
        cout << "1) Look for sensitive information in plain sight"<<endl;
        cout << "2) Install a remote access tool onto the intercom"<<endl;
        cout << "3) Hide for a few minutes"<<endl;
        cout << "4) Check the map"<<endl;
        cout << "5) Listen for the guard"<<endl;		
        cout << "6) Head back into the hall"<<endl;
        cout << "7) Go directly into the IT room, there are a lot of fans going in there. The "<<endl;
        cout << "   guard could easily be in there without you knowing it from here."<<endl;
        cout << "8) Slip out of the window and exit the building."<<endl;
			NOACTIONBOARD:// set a pointer so the player can do an action that does not consume an action
			action = validMove(1,7);
			switch(action){
				case 1:
					preformAction(yourLocation, 1);
					action= yourLocation; // use action
					break;
				case 2:
					result=preformAction(yourLocation, 10);
					if(result==1){
					cout << "# You switch out the companies intercom with your own intecom that allows you to listen "<< endl;
					cout << "# to conversations from the comfort of your office."<< endl;
					}
					action= yourLocation; // use action
					break;
				case 3:
						cout << "# Under the meeting table looks comfortable, you hide there."<< endl;
					player.hidden=0;
					player.nerve=player.nerve+5;
					action= yourLocation; // just chill
					break;
				case 4:
					printMap();
					action=yourLocation;
					goto NOACTIONBOARD;// go to the begining of the switch again.
					break;
				case 5:
					listen(yourLocation,guardLocation);
					action=yourLocation;
					goto NOACTIONBOARD;// go to the begining of the switch again.
					break;
				case 6:
					action= 20;
					break;
				case 7:
					player.nerve=player.nerve-10;//a blind move removes 10 nerve points
					action= 31;
					break;
				case 8:
					action= -1;
			}
			return action;
		
}

int itOffice(int yourLocation, int guardLocation){
		int result=0;
		int action=0;
//         cout << "Nerve : "<< nerve << "/100"<<endl;
			
			if(building.entereditOffice==0){
        cout << "You see a couple boxes of cables, a stack of old desktops, a couple monitors back to back on a desk. "<<endl;
			} else {cout << "You are in the "<<returnLocationString(player.location) <<endl;}
			building.entereditOffice=1;
			cout << ""<<endl;
        cout << "What would you like to do?"<<endl;
        cout << "1) Look for sensitive information"<<endl;
        cout << "2) Drop a keylogger on the admin workstation"<<endl;
        cout << "3) Hide for a few moments"<<endl;
        cout << "4) Head into the service hall(IT office and server room access)"<<endl;
        cout << "5) Check the map"<<endl;
        cout << "6) Listen for guard"<< endl;
		cout << "7) Move directly to the board room, The fans are so loud in here, its hard"<<endl;
        cout << "   to tell if there is anything going on in the board room."<<endl;
			NOACTIONIT:
			action= validMove(1,5);
			switch(action){
				case 1:
					preformAction(yourLocation, 1);
					action= yourLocation; // use action
					break;
				case 2:
					result=preformAction(yourLocation, 10);
					if(result==1){				
						cout << "# After doing a quick shoulder check, you attach a small device between"<< endl;
						cout << "# the keyboard and clearly labled administrator computer."<<endl;
					}

					action= yourLocation; // use action
					break;
				case 3:
					cout << "# You sit between a couple boxes of equipment and briefly contemplate life."<< endl;
					player.hidden=0;
					player.nerve=player.nerve+5;
					action= yourLocation; // just chill
					break;
				case 4:
					action=30;
					break;
				case 5:
					printMap();
					action=yourLocation;
					goto NOACTIONIT;
					break;
				case 6:
					listen(yourLocation,guardLocation);
					goto NOACTIONIT;
					break;
				case 7:
					player.nerve=player.nerve-10;//a blind move removes 10 nerve points
					action=22;
					break;
			}
			return action;
}


int office(int yourLocation, int guardLocation,int roomNumber){
		int action=0;
		int result=0;
//         cout << "Nerve : "<< nerve << "/100"<<endl;
        cout << "Office Number: " << roomNumber << endl;
        cout << "What would you like to do?"<< endl;
        cout << "1) Check the desk for sensitive information"<< endl;
        cout << "2) Take a few minutes to hack the computer"<< endl;
        cout << "3) Head back into the hall"<<endl;
        cout << "4) Hide in office for a couple minutes"<<endl;
        cout << "5) Check the map"<<endl;
        cout << "6) Listen for guard "<< endl;
			NOACTIONOFFICE:
			action= validMove(1,6);
			switch(action){
				case 1:
					preformAction(yourLocation, 1);
					action= yourLocation; // use action
					break;
				case 2:
					result=preformAction(yourLocation, 10);
					if(result==1){
					cout << "# You plug in the USB keyboard emulator and text starts flashing across"<< endl;
					cout << "# the screen. Terminals open and close rapidly like digital confetti."<<endl;
					}
					action= yourLocation; // use action
					break;
				case 3:
					action= (yourLocation/10)*10; // do some integer magic to get you into the correct hall.
					break;
				case 4:
					cout << "# You sit behind the desk on the floor and wait."<< endl;
					player.hidden=0;
					player.nerve=player.nerve+5;
					action= yourLocation; // just chill
					break;
				case 5:
					printMap();
					goto NOACTIONOFFICE;
					break;
				case 6:
					listen(yourLocation,guardLocation);
					goto NOACTIONOFFICE;
					break;
			}
			return action;
}
//-----------------Guard Action Functions---------------
int guardMove(int currentPosition){
        int nextMove=0;
        int roll=0; // roll to determine guards next move
// hall roll 0-stay, 1-move forward, 2-move back 4-move to room
        if(currentPosition%10==0){// if the current position is a divisable of 10 that means the guard is in a hallway
                roll=rand()%4;
                switch(roll){
                        case 0:
                                nextMove=currentPosition;
                                break;
                        case 1:
                                if(currentPosition==30){
                                        nextMove=30;
                                } else{
                                        nextMove=currentPosition+10;
                                }
                                break;
                        case 2:
                                if(currentPosition!=0){
                                        nextMove= currentPosition-10;
                                } else {nextMove=0;}
                                break;
                        case 3:
                                if(currentPosition<9){ // guard is in lobby can move to south hall or stay in place
                                        roll=rand()%2;
                                        if(roll==0){nextMove=0;}else{nextMove=10;}
                                } else if(currentPosition > 9 && currentPosition < 20){ // guard is in south hall
                                        roll=rand()%5;
                                        nextMove=roll+currentPosition;
                                } else if(currentPosition > 19 && currentPosition < 30){ // guard is in north hall
                                        roll=rand()%3;
                                        nextMove=roll+currentPosition;
                                } else if(currentPosition > 29 && currentPosition < 40){ // guard is in service hall
                                        roll=rand()%3;
                                        nextMove=roll+currentPosition;
                                }
                                break;
                }
        }
        else{// else if the guard is in a room
// room roll 0-stay, 1-move to hall
                roll=rand()%2;
                if(roll==0){
                        nextMove=currentPosition;
                }
                else{
                        nextMove=(currentPosition/10)*10;
                }
        }
//      cout << "guard moved from: "<< currentPosition << " to " << nextMove<< endl;
        return nextMove;

}

int caughtCheck(int you,int guard, int hidden){
        if(guard==you && hidden!=0){// if in the same room and not hidden you get busted
				if(building.lastGuardLocation!=building.guardLocation){
					cout << "Guard moved from "<< returnLocationString(building.lastGuardLocation) << " to " << returnLocationString(building.guardLocation)<< " and you got busted..."<<endl;
				}
                cout << "guard: BUSTED! PUT YOUR HANDS WHERE I CAN SEE EM!"<< endl;
                cout << "congratulations you just got caught. You explain what you are doing here to the"<< endl;
                cout << "guard and hope they accept your letter of authorization better to go home without"<< endl;
				cout << "a paycheck than to catch a bullet on the job."<< endl;
                return -2;// -2 means you were caught and failed the job
        }else if(guard==you && hidden==0){
				player.nerve=player.nerve-10;// if you and the guard are in the same room you start worrying
				return you;
		}else{
                return you;// player is not stopped by guard
        }
}


//------------------Main Function---------------
int main(){
	srand(time(NULL));
	int action=0;
	int caught=0;
// print the preamble
	intro();

/* DEBUGGING
//test the guard movement to see if it makes sense
for(int i; i<100; i++){
        building.guardLocation=guardMove(building.guardLocation);
                listen(player.location,building.guardLocation);
}
*/
//-----------------------beginning of the game loop--------------------
	while(player.location>=0){// if the players location is below zero then the game has ended.
// count the number of terms per play instance
		player.turns=player.turns+1;

// nerve mechanisim
		if(player.hidden==0){// if the player is hidden regain 10 nerve points
			player.nerve=player.nerve+10;
		}
		if(player.listened==1){
			player.nerve=player.nerve+1;
		}
		player.listened=0;// reset the players listen counter every turn.
		if(player.nerve>100){// if the players nerve is above 100 percent then set the players nerve back to 100
			player.nerve=100;
		}else if(player.nerve < 50 && player.nerve > 25){// if the player drops below 50 percent nerve display a warning.
				cout << endl << "### Your palms are getting a little sweaty..."<< endl;
				cout << "### Nerve is below 50% you should probably hide or listen for the guard a number of times."<< endl;
		}else if(player.nerve < 25 && player.nerve > 10){// if the players nerve is below 25 percent then print out another warning.
			cout << endl << "### Your can hear your heart beating inside of your chest."<< endl;
			cout << "### Nerve is below 25% you will automatically leave the building and loose everything at 0%"<< endl;
		}else if(player.nerve < 10 && player.nerve > 0){// below 10 percent print out a more stark warning to the player
			cout << endl << "### You start remembering the big gun the guard has and start to plan a way out"<< endl;
			cout << "### You have below 10% nerve left you will run out of the building any moment if"<< endl;
			cout << "### you do not regain your sanity by listening or waiting somewhere."<<endl;
		}else if(player.nerve==0){// if the player has ignored every warning up to this point rip them out of the game
			player.location=-3;// display the ending where you loose your cool.
		}
		cout << endl << "#nerve: %"<< player.nerve<<endl;// always print the charicters nerve.

//		building.guardLocation=guardMove(building.guardLocation);// set the guards new location // with the guard location being set here  the guard moves before the player does 
//Get the players current location and give them the appropreate action
		cout << endl;
//		enterToContinue();
		cin.ignore();
		cin.clear();

		switch(player.location){
			case 0:
					action =lobby(); // returns the next room the player will move to
					break;
			case 10:// south hall
					action =southHall(player.location,building.guardLocation);// returns the next room the player will move to
					break;
			case 11:// office 1
					action =office(player.location,building.guardLocation,1);// returns the next room the player will move to
					break;
			case 12:// office 2
					action =office(player.location,building.guardLocation,2);// returns the next room the player will move to
					break;
			case 13:// office 3
					action =office(player.location,building.guardLocation,3);// returns the next room the player will move to
					break;
			case 14:// office 4
					action =office(player.location,building.guardLocation,4);// returns the next room the player will move to
					break;
			case 20:// north hall
					action =northHall(player.location,building.guardLocation);// returns the next room the player will move to
					break;
			case 21:// office 5
					action =office(player.location,building.guardLocation,5);// returns the next room the player will move to
					break;
			case 22:// board room
					action =boardRoom(player.location,building.guardLocation);// returns the next room the player will move to
					break;
			case 30:// service hall
					action =serviceHall(player.location,building.guardLocation);// returns the next room the player will move to
					break;
			case 31:// IT office
					action =itOffice(player.location,building.guardLocation);// returns the next room the player will move to
					break;
			case 32:// server room
					action =serverRoom(player.location,building.guardLocation);// returns the next room the player will move to
					break;
		}
			if(player.location!=action){
				player.hidden=1;// unhide the player if they move to a new room
				player.nerve=player.nerve-5;// the player looses 3 nerve just from moving
			}
			player.location=action;// set the players location according to the action taken
			building.lastGuardLocation=building.guardLocation;// set the last guard location so if the player was caught they know how.
			building.guardLocation=guardMove(building.guardLocation);// set the guards location 
			//When the above funciton is uncommented the guard can walk in on the player at any time
			player.location=caughtCheck(player.location,building.guardLocation,player.hidden); // check to see if the guard and the player are in the same room if they are then the players locaiton is set to -1
			player.hidden=1;// automatically unhide the player, when the player hides they are invisible to the guard even if they walk into the same room as them.
			player.nerve=player.nerve-1;

	}
	score(player.location);// the location of the player dictates what the ending to the story will be.
	cout << endl;
}
